name: Release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  BIN_NAME: ascella-desktop
  PROJECT_NAME: ascella-desktop
  REPO_NAME: ascellahost/desktop

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, x86_64-macos, aarch64-macos] # x86_64-windows, x86_64-win-gnu, win32-msvc aarch64-linux
        include:
          - build: x86_64-linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          # - build: aarch64-linux
          #   os: ubuntu-20.04
          #   rust: stable
          #   target: aarch64-unknown-linux-gnu
          #   cross: true
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            cross: false
          - build: x86_64-windows
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      - name: make dist
        run: mkdir dist

      - name: Build archive
        shell: bash
        run: |

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            ls target
            ls target/${{ matrix.target }}


            cp target/wix/ascella-desktop* dist/
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ascella-desktop-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2

      - run: ls -al ascella-desktop-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist


          for dir in ascella-desktop-* ; do
              platform=${dir#"ascella-desktop-"}
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              ls
              pkgname=$PROJECT_NAME-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname

              [ -f ascella-desktop-$platform/ascella-desktop-* ] && mv ascella-desktop-$platform/ascella-desktop-* tmp/$pkgname/
              [ -f ascella-desktop-$platform/ascella-desktop_* ] && mv ascella-desktop-$platform/ascella-desktop_* tmp/$pkgname/
              [ -f ascella-desktop-$platform/ascella-desktop-*.msi ] && mv ascella-desktop-$platform/*.msi tmp/$pkgname/
              [ -f ascella-desktop-$platform/PKGBUILD ] && mv ascella-desktop-$platform/PKGBUILD tmp/$pkgname/

              mv ascella-desktop-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"

  # publish-cargo:
  #   name: Publishing to Cargo
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true
  #     - run: |
  #         sudo apt-get update
  #         sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: publish
  #         args: --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
